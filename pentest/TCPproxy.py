import sys 
import socket 
import threading 
# ============================================================================ #
# Defines hexdump function which outputs plaintext as plaintext & hexidecimal. # 
# ============================================================================ #
HEX_FILTER = ''.join(
    [(len(repr(chr(i))) == 3) and chr(i) or '.' for i in range(256)])
def hexdump(src, length=16, show=True):
    if isinstance(src, bytes):
        src = src.decode()

    results = list()
    for i in range(0, len(src), length):
        word = str(src[i:i+length])

        printable = word.translate(HEX_FILTER)
        hexa = ' '.join([f'{ord(c):02X}' for c in word ])
        hexwidth = length*3
        results.append(f'{i:04x} {hexa:<{hexwidth}} {printable}')
    if show: 
        for line in results:
            print(line)
    else: 
        return results
# ========================================================================= #
# Define a function which allows the two ends of the proxy to receive data. #
# ========================================================================= #
def receive_from(connection):
    buffer = b""
    connection.settimeout(5)
    try: 
        while True:
            data = connection.recv(4096)
            if not data: 
                break
            buffer += data 
    except Exception as e:
        pass
    return buffer
# ================================= #
# Perform packet modifications here. #
# ---------------------------- #
def request_handler(buffer):
	return buffer
# ================================= #
# Perform packet modifications here #
# ================================= # 
def response_handler(buffer):
    return buffer
# ================================================================ #
# Defines proxy_handler function for controlling our proxy's logic #
# ================================================================ # 
def proxy_handler(client_socket, remote_host, remote_port, recieve_first): 
    remote_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    remote_socket.connect((remote_host, remote_port))
    
    if recieve_first: 
        remote_buffer = recieve_from(remote_socket)
        hexdump(remote_buffer)
    
    remote_buffer = response_handler(remote_buffer)
    if len(remote_buffer):
        print("[<==]Sending %d bytes to localhost." % len(remote_buffer))
        client_socket.send(remote_buffer)

    while True: 
        local_buffer = recieve_from(client_socket)
        if len(local_buffer):
            line = "[==>]Recieved %d bytes from localhost"
            print(line)
            hexdump(local_buffer)

            local_buffer = request_handler(local-buffer)
            remote_socket.send(local_buffer)
            print("[==>] Sent to remote.")

        remote_buffer = recieve_from(remote_socket)
        if len(remote-buffer):
            print("[<==] Recieved %d bytes from remote." % len(remote_buffer)) 
            hexdump(remote_buffer)

            remote_buffer = response_handler(remote_buffer)
            client_socket.send(remote_buffer)
            print("[==>] Sent to localhost.")

        if not len(local_buffer) or not len(remote_buffer):
            client.socket.close()
            remote.socket.close()
            print("[*] No more data. Closing Connections")

# ======================================================= #
# Defines the server_loop function to manage connections. #
# Creates the socket, and than binds to host and listens. #
# ======================================================= #
def server_loop(local_host, local_port,
	            remote_host, remote_port, recieve_first):
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try: 
        server.bind((local_host, local_port))
    except Exception as e: 
        print('problem on bind: %r' % e)

        print("[!!] Failed to listen on %s:%d" (local_host, local_port))
        print("[!!] Check for other listening sockets or check permissions.")
        sys.exit[0]

    print("[*] Listening on %s:%d" % (local_host, local_port))
    server.listen(5)
    while True: 
        client_socket, addr = server.accept()
        # =================================== #
        # Print local connection information. # 
        # =================================== #
        line = "> Receieved incoming connection from %s:%d" % (addr[0], addr[1])
        print(line)
        # ====================================== #
        # Start a thread to talk to remote host. # 
        # ====================================== #
        proxy_thread = threading.Thread(
        	target=proxy_handler, 
        	args=(client_socket, remote_host, 
        	remote_port, receive_first))
        proxy_thread.start()

# =========================== #
# Defines main_loop function. #
# =========================== #
def main(): 
    if len(sys.argv[1:]) != 5:
        print("Usage: ./tcproxy.py") 
        print("[remotehost] [remoteport] [recieve_first]")
        print("Example: ./tcproxy.py 127.0.0.1 9000 10.12.132.1 9000 true")
        sys.exit(0)
